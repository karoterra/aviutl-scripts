@円弧
--track0:曲率,-10000,10000,0,0.01
--track1:割合,0,100,0,0.01
--track2:分割数,1,5000,16,1
--check0:アンカー表示,1
--dialog:始点/chk,p1=1;終点/chk,p2=1;中心(0-6),p3=0;破綻回避/chk,p4=0;アンカー,pA={0,100,0,-100};
--[[
  始点: 赤マーカーより外側を描画するか
  終点: 青マーカーより外側を描画するか
  中心
    0: オリジナルの中心
    1: 変形後の中心
    2: 赤マーカー
    3: 青マーカー
    4: 緑マーカー
    5: マゼンダマーカー
    6: シアンマーカー
  破綻回避: 曲率が大きい時にうまく描画されないのを回避するか
]]

local B = require("KaroterraBend")

pA = pA or {0, 100, 0, -100}
obj.setanchor("pA", 2)

local curvature = obj.track0 / 10000
local radius = 1 / curvature
local rate = obj.track1 / 100
local div = math.floor(obj.track2)
local startMode = p1 or 1
local endMode = p2 or 1
local centerMode = p3 or 0
local collapse = p4 or 0

local w, h = obj.getpixel()
local ancS = {B.clamp(pA[1], -w/2, w/2), B.clamp(pA[2], -h/2, h/2)}
local ancE = {B.clamp(pA[3], -w/2, w/2), B.clamp(pA[4], -h/2, h/2)}
local ancC = {(1-rate)*ancS[1] + rate*ancE[1], (1-rate)*ancS[2] + rate*ancE[2]}
local curvS, curvE = ancS, ancE

local ancRad = math.atan2(ancE[2] - ancS[2], ancE[1] - ancS[1])
local ancDist = math.sqrt((ancE[1]-ancS[1])^2 + (ancE[2]-ancS[2])^2)
local curvSRad = ancRad - math.pi / 2
local curvERad = ancRad - math.pi / 2

local srcS, srcE, srcI = B.createSrc(ancS, ancE, w, h, div)
local dstS, dstE, dstI = {}, {}, {}

-- 変換
if curvature == 0 then
  for i = 1, #srcI do
    dstI[i] = {}
    for j = 1, #srcI[i], 2 do
      dstI[i][j] = srcI[i][j] - w/2
      dstI[i][j+1] = srcI[i][j+1] - h/2
    end
  end
else
  local curvRad = ancRad + math.pi / 2
  local curvC = {ancC[1] + radius*math.cos(curvRad), ancC[2] + radius*math.sin(curvRad)}
  curvSRad = curvRad - math.pi - rate * ancDist / radius
  curvERad = curvRad - math.pi + (1-rate) * ancDist / radius
  curvS = {curvC[1] + radius*math.cos(curvSRad), curvC[2] + radius*math.sin(curvSRad)}
  curvE = {curvC[1] + radius*math.cos(curvERad), curvC[2] + radius*math.sin(curvERad)}
  local la = B.calcLine(ancS[1], ancS[2], ancE[1], ancE[2])
  local lc = {la[2], -la[1], la[1]*ancS[2] - la[2]*ancS[1]}

  for i = 1, #srcI do
    dstI[i] = {}
    for j = 1, #srcI[i], 2 do
      local x, y = srcI[i][j] - w/2, srcI[i][j+1] - h/2
      local r = radius - B.distPtLine(x, y, la) * B.sign(B.cross(ancS[1],ancS[2], ancE[1],ancE[2], x,y))
      local dist = B.distPtLine(x, y, lc)
      local rad = curvSRad + dist / radius
      dstI[i][j] = curvC[1] + r * math.cos(rad)
      dstI[i][j+1] = curvC[2] + r * math.sin(rad)
    end
    if collapse == 1 then
      srcI[i], dstI[i] = B.fixCollapse(srcI[i], dstI[i])
    end
  end
end

for i = 1, #srcS do
  dstS[i] = B.transformEdge(srcS[i], ancS, curvS, curvSRad-ancRad+math.pi/2, w, h)
end
for i = 1, #srcE do
  dstE[i] = B.transformEdge(srcE[i], ancE, curvE, curvERad-ancRad+math.pi/2, w, h)
end

-- キャンバス
local minX, minY, maxX, maxY = dstI[1][1], dstI[1][2], dstI[1][1], dstI[1][2]
if obj.check0 then
  minX, maxX, minY, maxY = -w/2, w/2, -h/2, h/2
end
for i = 1, #dstI do
  minX = math.min(minX, dstI[i][1], dstI[i][3], dstI[i][5], dstI[i][7])
  maxX = math.max(maxX, dstI[i][1], dstI[i][3], dstI[i][5], dstI[i][7])
  minY = math.min(minY, dstI[i][2], dstI[i][4], dstI[i][6], dstI[i][8])
  maxY = math.max(maxY, dstI[i][2], dstI[i][4], dstI[i][6], dstI[i][8])
end
if startMode == 1 then
  for i = 1, #dstS do
    minX = math.min(minX, dstS[i][1], dstS[i][3], dstS[i][5], dstS[i][7])
    maxX = math.max(maxX, dstS[i][1], dstS[i][3], dstS[i][5], dstS[i][7])
    minY = math.min(minY, dstS[i][2], dstS[i][4], dstS[i][6], dstS[i][8])
    maxY = math.max(maxY, dstS[i][2], dstS[i][4], dstS[i][6], dstS[i][8])
  end
end
if endMode == 1 then
  for i = 1, #dstE do
    minX = math.min(minX, dstE[i][1], dstE[i][3], dstE[i][5], dstE[i][7])
    maxX = math.max(maxX, dstE[i][1], dstE[i][3], dstE[i][5], dstE[i][7])
    minY = math.min(minY, dstE[i][2], dstE[i][4], dstE[i][6], dstE[i][8])
    maxY = math.max(maxY, dstE[i][2], dstE[i][4], dstE[i][6], dstE[i][8])
  end
end
if obj.check0 then
  minX, maxX, minY, maxY = minX - 12.5, maxX + 12.5, minY - 12.5, maxY + 12.5
end
local ox, oy = (maxX + minX) / 2, (maxY + minY) / 2

-- 描画
obj.setoption("drawtarget", "tempbuffer", maxX-minX, maxY-minY)

if obj.check0 then
  obj.draw(-ox,-oy,0, 1, 0.5)
end

obj.setoption("blend", "alpha_add2")
if startMode == 1 then
  for i = 1, #srcS do B.drawpoly(obj, dstS[i], ox, oy, srcS[i]) end
end
for i = 1, #srcI do B.drawpoly(obj, dstI[i], ox, oy, srcI[i]) end
if endMode == 1 then
  for i = 1, #srcE do B.drawpoly(obj, dstE[i], ox, oy, srcE[i]) end
end

-- アンカー表示
if obj.check0 then
  B.drawMarker(obj, curvS[1]-ox, curvS[2]-oy, 0xff00ff)
  B.drawMarker(obj, curvE[1]-ox, curvE[2]-oy, 0x00ffff)
  B.drawMarker(obj, ancC[1]-ox, ancC[2]-oy, 0x00ff00)
  B.drawMarker(obj, ancS[1]-ox, ancS[2]-oy, 0xff0000)
  B.drawMarker(obj, ancE[1]-ox, ancE[2]-oy, 0x0000ff)
end

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")
if centerMode == 1 then
  obj.ox = obj.ox + ox
  obj.oy = obj.oy + oy
elseif centerMode == 2 then
  obj.ox = obj.ox + ancS[1]
  obj.oy = obj.oy + ancS[2]
  obj.cx = obj.cx - ox + ancS[1]
  obj.cy = obj.cy - oy + ancS[2]
elseif centerMode == 3 then
  obj.ox = obj.ox + ancE[1]
  obj.oy = obj.oy + ancE[2]
  obj.cx = obj.cx - ox + ancE[1]
  obj.cy = obj.cy - oy + ancE[2]
elseif centerMode == 4 then
  obj.ox = obj.ox + ancC[1]
  obj.oy = obj.oy + ancC[2]
  obj.cx = obj.cx - ox + ancC[1]
  obj.cy = obj.cy - oy + ancC[2]
elseif centerMode == 5 then
  obj.ox = obj.ox + curvS[1]
  obj.oy = obj.oy + curvS[2]
  obj.cx = obj.cx - ox + curvS[1]
  obj.cy = obj.cy - oy + curvS[2]
elseif centerMode == 6 then
  obj.ox = obj.ox + curvE[1]
  obj.oy = obj.oy + curvE[2]
  obj.cx = obj.cx - ox + curvE[1]
  obj.cy = obj.cy - oy + curvE[2]
else
  obj.cx = obj.cx - ox
  obj.cy = obj.cy - oy
end

@ベジェ曲線
--track0:分割数,1,5000,16,1
--check0:アンカー表示,1
--dialog:始点/chk,p1=1;終点/chk,p2=1;中心(0-6),p3=0;破綻回避/chk,p4=0;積分ステップ,p5=0.001;アンカー,pA={0,100,0,-100,100,-100,0,0,100,0};
--[[
  始点: 赤マーカーより外側を描画するか
  終点: 青マーカーより外側を描画するか
  中心
    0: オリジナルの中心
    1: 変形後の中心
    2: 赤マーカー
    3: 青マーカー
    4: シアンマーカー
    5: 緑マーカー
  破綻回避: 曲率が大きい時にうまく描画されないのを回避するか
  積分ステップ: ベジェ曲線の長さを計算するために使う0より大きい値
]]

local B = require("KaroterraBend")

pA = pA or {0,100, 0,-100, 100,-100, 0,0, 100,0}
obj.setanchor("pA", 5)

local div = math.floor(obj.track0)
local startMode = p1 or 1
local endMode = p2 or 1
local centerMode = p3 or 0
local collapse = p4 or 0
local step = math.max(p5 or 0.001, 1e-5)
print(step)

local w, h = obj.getpixel()
local ancS = {B.clamp(pA[1], -w/2, w/2), B.clamp(pA[2], -h/2, h/2)}
local ancE = {B.clamp(pA[3], -w/2, w/2), B.clamp(pA[4], -h/2, h/2)}
local ctrl1, ctrl2, ctrl3 = {pA[7], pA[8]}, {pA[9], pA[10]}, {pA[5], pA[6]}

local ancRad = math.atan2(ancE[2] - ancS[2], ancE[1] - ancS[1])
local ancDist = math.sqrt((ancE[1]-ancS[1])^2 + (ancE[2]-ancS[2])^2)

local function bezierDt(t)
  local dx = 3*(-ancS[1]+3*(ctrl1[1]-ctrl2[1])+ctrl3[1])*t^2+6*(ancS[1]-2*ctrl1[1]+ctrl2[1])*t+3*(-ancS[1]+ctrl1[1])
  local dy = 3*(-ancS[2]+3*(ctrl1[2]-ctrl2[2])+ctrl3[2])*t^2+6*(ancS[2]-2*ctrl1[2]+ctrl2[2])*t+3*(-ancS[2]+ctrl1[2])
  return dx, dy
end

local function bezierDl(t)
  local dx, dy = bezierDt(t)
  return math.sqrt(dx*dx + dy*dy)
end

local function bezier(t, s)
  local x = (1-t)^3*ancS[1] + 3*(1-t)^2*t*ctrl1[1] + 3*(1-t)*t^2*ctrl2[1] + t^3*ctrl3[1]
  local y = (1-t)^3*ancS[2] + 3*(1-t)^2*t*ctrl1[2] + 3*(1-t)*t^2*ctrl2[2] + t^3*ctrl3[2]
  local dx, dy = bezierDt(t)
  local rad = math.atan2(dy, dx) + math.pi / 2
  x, y = x + s * math.cos(rad), y + s * math.sin(rad)
  return x, y
end

local srcS, srcE, srcI = B.createSrc(ancS, ancE, w, h, div)
local dstS, dstE, dstI = {}, {}, {}

-- 変換
local la = B.calcLine(ancS[1], ancS[2], ancE[1], ancE[2])
local lc = {la[2], -la[1], la[1]*ancS[2] - la[2]*ancS[1]}
local ptE = {idx="e", pt=1, dist=ancDist, s=0}
local pt = {ptE}
dstI["e"] = {0,0}
for i = 1, #srcI do
  dstI[i] = {}
  for j = 1, #srcI[i], 2 do
    local x, y = srcI[i][j] - w/2, srcI[i][j+1] - h/2
    pt[#pt+1] = {
      idx=i, pt=j,
      dist=B.distPtLine(x, y, lc),
      s=B.distPtLine(x, y, la) * B.sign(B.cross(ancS[1],ancS[2], ancE[1],ancE[2], x,y))
    }
  end
end
table.sort(pt, function(a, b) return a.dist < b.dist end)
-- 台形積分
local t, tprev = step, 0
local dlprev, lprev = bezierDl(0), 0
local dl = bezierDl(t)
local l = (dl + dlprev) * step / 2 + lprev
for i = 1, #pt do
  while pt[i].dist > l do
    tprev, dlprev, lprev = t, dl, l
    t = t + step
    dl = bezierDl(t)
    l = (dl + dlprev) * step / 2 + lprev
  end
  local rate = (pt[i].dist - l) / (lprev - l)
  pt[i].t = rate*tprev + (1-rate)*t
  dstI[pt[i].idx][pt[i].pt], dstI[pt[i].idx][pt[i].pt+1] = bezier(pt[i].t, pt[i].s)
end

if collapse == 1 then
  for i = 1, #srcI do srcI[i], dstI[i] = B.fixCollapse(srcI[i], dstI[i]) end
end

local rad = math.atan2(ctrl1[2] - ancS[2], ctrl1[1] - ancS[1])
for i = 1, #srcS do
  dstS[i] = B.transformEdge(srcS[i], ancS, ancS, rad-ancRad, w, h)
end
local dx, dy = bezierDt(ptE.t)
rad = math.atan2(dy, dx)
for i = 1, #srcE do
  dstE[i] = B.transformEdge(srcE[i], ancE, dstI["e"], rad-ancRad, w, h)
end

-- キャンバス
local minX, minY, maxX, maxY = dstI[1][1], dstI[1][2], dstI[1][1], dstI[1][2]
if obj.check0 then
  minX = math.min(-w/2, ctrl1[1], ctrl2[1], ctrl3[1])
  maxX = math.max( w/2, ctrl1[1], ctrl2[1], ctrl3[1])
  minY = math.min(-h/2, ctrl1[2], ctrl2[2], ctrl3[2])
  maxY = math.max( h/2, ctrl1[2], ctrl2[2], ctrl3[2])
end
for i = 1, #dstI do
  minX = math.min(minX, dstI[i][1], dstI[i][3], dstI[i][5], dstI[i][7])
  maxX = math.max(maxX, dstI[i][1], dstI[i][3], dstI[i][5], dstI[i][7])
  minY = math.min(minY, dstI[i][2], dstI[i][4], dstI[i][6], dstI[i][8])
  maxY = math.max(maxY, dstI[i][2], dstI[i][4], dstI[i][6], dstI[i][8])
end
if startMode == 1 then
  for i = 1, #dstS do
    minX = math.min(minX, dstS[i][1], dstS[i][3], dstS[i][5], dstS[i][7])
    maxX = math.max(maxX, dstS[i][1], dstS[i][3], dstS[i][5], dstS[i][7])
    minY = math.min(minY, dstS[i][2], dstS[i][4], dstS[i][6], dstS[i][8])
    maxY = math.max(maxY, dstS[i][2], dstS[i][4], dstS[i][6], dstS[i][8])
  end
end
if endMode == 1 then
  for i = 1, #dstE do
    minX = math.min(minX, dstE[i][1], dstE[i][3], dstE[i][5], dstE[i][7])
    maxX = math.max(maxX, dstE[i][1], dstE[i][3], dstE[i][5], dstE[i][7])
    minY = math.min(minY, dstE[i][2], dstE[i][4], dstE[i][6], dstE[i][8])
    maxY = math.max(maxY, dstE[i][2], dstE[i][4], dstE[i][6], dstE[i][8])
  end
end
if obj.check0 then
  minX, maxX, minY, maxY = minX - 12.5, maxX + 12.5, minY - 12.5, maxY + 12.5
end
local ox, oy = (maxX + minX) / 2, (maxY + minY) / 2

-- 描画
obj.setoption("drawtarget", "tempbuffer", maxX-minX, maxY-minY)

if obj.check0 then
  obj.draw(-ox,-oy,0, 1, 0.5)
end

obj.setoption("blend", "alpha_add2")
if startMode == 1 then
  for i = 1, #srcS do B.drawpoly(obj, dstS[i], ox, oy, srcS[i]) end
end
for i = 1, #srcI do B.drawpoly(obj, dstI[i], ox, oy, srcI[i]) end
if startMode == 1 then
  for i = 1, #srcE do B.drawpoly(obj, dstE[i], ox, oy, srcE[i]) end
end

if obj.check0 then
  B.drawLine(obj, ancS[1]-ox, ancS[2]-oy, ctrl1[1]-ox, ctrl1[2]-oy, 1, 0x888888)
  B.drawLine(obj, ctrl2[1]-ox, ctrl2[2]-oy, ctrl3[1]-ox, ctrl3[2]-oy, 1, 0x888888)
  local x, y = ancS[1]-ox, ancS[2]-oy
  for t = 0.01, 1.01, 0.01 do
    local x1, y1 = bezier(t, 0)
    x1, y1 = x1-ox, y1-oy
    B.drawLine(obj, x, y, x1, y1, 1, 0xffffff)
    x, y = x1, y1
  end
  B.drawMarker(obj, dstI["e"][1]-ox, dstI["e"][2]-oy, 0x00ffff)
  B.drawMarker(obj, ancS[1]-ox, ancS[2]-oy, 0xff0000)
  B.drawMarker(obj, ancE[1]-ox, ancE[2]-oy, 0x0000ff)
  B.drawMarker(obj, ctrl1[1]-ox, ctrl1[2]-oy, 0x333333)
  B.drawMarker(obj, ctrl2[1]-ox, ctrl2[2]-oy, 0x333333)
  B.drawMarker(obj, ctrl3[1]-ox, ctrl3[2]-oy, 0x00ff00)
end

obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")
if centerMode == 1 then
  obj.ox = obj.ox + ox
  obj.oy = obj.oy + oy
elseif centerMode == 2 then
  obj.ox = obj.ox + ancS[1]
  obj.oy = obj.oy + ancS[2]
  obj.cx = obj.cx - ox + ancS[1]
  obj.cy = obj.cy - oy + ancS[2]
elseif centerMode == 3 then
  obj.ox = obj.ox + ancE[1]
  obj.oy = obj.oy + ancE[2]
  obj.cx = obj.cx - ox + ancE[1]
  obj.cy = obj.cy - oy + ancE[2]
elseif centerMode == 4 then
  obj.ox = obj.ox + dstI["e"][1]
  obj.oy = obj.oy + dstI["e"][2]
  obj.cx = obj.cx - ox + dstI["e"][1]
  obj.cy = obj.cy - oy + dstI["e"][2]
elseif centerMode == 5 then
  obj.ox = obj.ox + ctrl3[1]
  obj.oy = obj.oy + ctrl3[2]
  obj.cx = obj.cx - ox + ctrl3[1]
  obj.cy = obj.cy - oy + ctrl3[2]
else
  obj.cx = obj.cx - ox
  obj.cy = obj.cy - oy
end
